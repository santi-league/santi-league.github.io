# -*- coding: utf-8 -*-
"""
生成静态网站

用法：
  python generate_website.py
"""

import os
import sys
import json
from player_stats import calculate_player_stats, scan_files, summarize_log

def generate_index_html():
    """生成首页"""
    html = """<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>雀魂统计 - Santi League</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Microsoft YaHei', 'PingFang SC', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .container {
            text-align: center;
            padding: 40px;
        }

        .logo {
            font-size: 72px;
            margin-bottom: 20px;
            animation: float 3s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        h1 {
            font-size: 48px;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .subtitle {
            font-size: 20px;
            margin-bottom: 60px;
            opacity: 0.9;
        }

        .links {
            display: flex;
            gap: 40px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .link-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px 60px;
            border-radius: 20px;
            text-decoration: none;
            color: white;
            transition: all 0.3s ease;
            border: 2px solid rgba(255, 255, 255, 0.2);
            min-width: 200px;
        }

        .link-card:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .link-card .icon {
            font-size: 64px;
            margin-bottom: 20px;
            display: block;
        }

        .link-card .title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .link-card .desc {
            font-size: 14px;
            opacity: 0.8;
        }

        footer {
            position: fixed;
            bottom: 20px;
            font-size: 14px;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">🀄</div>
        <h1>Santi League</h1>
        <p class="subtitle">雀魂麻将数据统计</p>

        <div class="links">
            <a href="m-league.html" class="link-card">
                <span class="icon">🎴</span>
                <div class="title">M-League</div>
                <div class="desc">查看 M-League 数据统计</div>
            </a>

            <a href="wrc.html" class="link-card">
                <span class="icon">🏆</span>
                <div class="title">WRC</div>
                <div class="desc">查看 WRC 数据统计</div>
            </a>
        </div>
    </div>

    <footer>
        Generated by Santi League Stats System
    </footer>
</body>
</html>
"""
    return html


def generate_stats_html(title, stats_data, league_name):
    """生成统计页面"""
    # 按对局数降序排序
    sorted_players = sorted(stats_data.items(), key=lambda x: (-x[1]["games"], x[0]))

    # 生成表格行
    table_rows = ""
    for name, data in sorted_players:
        table_rows += f"""
        <tr>
            <td class="player-name">{name}</td>
            <td>{data['games']}</td>
            <td>{data['total_rounds']}</td>
            <td class="highlight">{data['tenhou_r']:.2f}</td>
            <td>{data['total_score']:+}</td>
            <td>{data['avg_rank']:.2f}</td>
            <td>{data['rank_1_rate']:.1f}%</td>
            <td>{data['win_rate']:.1f}%</td>
            <td>{data['deal_in_rate']:.1f}%</td>
            <td>{data['riichi_rate']:.1f}%</td>
            <td>{data['furo_rate']:.1f}%</td>
        </tr>
        """

    # 生成详细统计卡片
    detail_cards = ""
    for name, data in sorted_players:
        riichi_win_hands = data['riichi_win_hands']
        furo_then_win_hands = data['furo_then_win_hands']
        other_win_hands = data['other_win_hands']

        # 手役统计（前10）
        yaku_html = ""
        if data.get('yaku_count'):
            yaku_sorted = sorted(data['yaku_count'].items(), key=lambda x: -x[1])[:10]
            for yaku, count in yaku_sorted:
                from player_stats import YAKU_TRANSLATION
                yaku_cn = YAKU_TRANSLATION.get(yaku, yaku)
                rate = data['yaku_rate'].get(yaku, 0)
                yaku_html += f"<li>{yaku_cn}: {count}次 ({rate}%)</li>"

        detail_cards += f"""
        <div class="player-card">
            <h3>{name}</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-label">天凤R值</div>
                    <div class="stat-value large">{data['tenhou_r']:.2f}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">总点数</div>
                    <div class="stat-value">{data['total_score']:+}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">平均顺位</div>
                    <div class="stat-value">{data['avg_rank']:.2f}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">对局数</div>
                    <div class="stat-value">{data['games']} 半庄</div>
                </div>
            </div>

            <div class="section">
                <h4>名次分布</h4>
                <div class="rank-bars">
                    <div class="rank-bar">
                        <span class="rank-label">1位</span>
                        <div class="bar-container">
                            <div class="bar bar-1" style="width: {data['rank_1_rate']}%"></div>
                            <span class="bar-text">{data['rank_1']}次 ({data['rank_1_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">2位</span>
                        <div class="bar-container">
                            <div class="bar bar-2" style="width: {data['rank_2_rate']}%"></div>
                            <span class="bar-text">{data['rank_2']}次 ({data['rank_2_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">3位</span>
                        <div class="bar-container">
                            <div class="bar bar-3" style="width: {data['rank_3_rate']}%"></div>
                            <span class="bar-text">{data['rank_3']}次 ({data['rank_3_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">4位</span>
                        <div class="bar-container">
                            <div class="bar bar-4" style="width: {data['rank_4_rate']}%"></div>
                            <span class="bar-text">{data['rank_4']}次 ({data['rank_4_rate']:.1f}%)</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="section">
                <h4>和了统计</h4>
                <p>和了: {data['win_hands']} 局 ({data['win_rate']:.1f}%), 平均打点: {data['avg_win_points']:.0f}</p>
                <ul>
                    <li>立直和了: {riichi_win_hands} 局 (平均{data['avg_riichi_win_points']:.0f}点), 一发: {data['ippatsu_hands']} 局 ({data['ippatsu_rate']:.1f}%), 里宝: {data['ura_hands']} 局 ({data['ura_rate']:.1f}%)</li>
                    <li>副露和了: {furo_then_win_hands} 局 (平均{data['avg_furo_win_points']:.0f}点)</li>
                    {f"<li>其他和了: {other_win_hands} 局 (平均{data['avg_other_win_points']:.0f}点)</li>" if other_win_hands > 0 else ""}
                </ul>
            </div>

            <div class="section">
                <h4>立直 & 副露</h4>
                <p>立直: {data['riichi_hands']} 局 ({data['riichi_rate']:.1f}%), 立直后: 和了{data['riichi_win_rate']:.1f}% / 流局{data['riichi_ryuukyoku_rate']:.1f}% / 放铳{data['riichi_then_deal_in_rate']:.1f}% / 横移{data['riichi_pass_rate']:.1f}%</p>
                <p>副露: {data['furo_hands']} 局 ({data['furo_rate']:.1f}%), 副露后: 和了{data['furo_then_win_rate']:.1f}% / 流局{data['furo_ryuukyoku_rate']:.1f}% / 放铳{data['furo_then_deal_in_rate']:.1f}% / 横移{data['furo_pass_rate']:.1f}%</p>
            </div>

            <div class="section">
                <h4>放铳统计</h4>
                <p>放铳: {data['deal_in_hands']} 局 ({data['deal_in_rate']:.1f}%), 平均失点: {data['avg_deal_in_points']:.0f}</p>
            </div>

            {f'''<div class="section">
                <h4>手役统计 (前10名)</h4>
                <ul class="yaku-list">
                    {yaku_html}
                </ul>
            </div>''' if yaku_html else ''}

            {f'''<div class="section">
                <h4>流局听牌</h4>
                <p>流局: {data['ryuukyoku_hands']} 次, 听牌 {data['ryuukyoku_tenpai']} 次 ({data['tenpai_rate']:.1f}%)</p>
            </div>''' if data['ryuukyoku_hands'] > 0 else ''}
        </div>
        """

    html = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - Santi League</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Microsoft YaHei', 'PingFang SC', sans-serif;
            background: #f5f5f5;
            color: #333;
        }}

        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .header h1 {{
            font-size: 36px;
            margin-bottom: 10px;
        }}

        .back-link {{
            display: inline-block;
            margin-top: 10px;
            color: white;
            text-decoration: none;
            opacity: 0.9;
        }}

        .back-link:hover {{
            opacity: 1;
            text-decoration: underline;
        }}

        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}

        .summary-table {{
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow-x: auto;
            margin-bottom: 30px;
        }}

        table {{
            width: 100%;
            border-collapse: collapse;
        }}

        th {{
            background: #667eea;
            color: white;
            padding: 15px 10px;
            text-align: center;
            font-weight: 600;
        }}

        td {{
            padding: 12px 10px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }}

        tr:hover {{
            background: #f9f9f9;
        }}

        .player-name {{
            font-weight: bold;
            color: #667eea;
        }}

        .highlight {{
            background: #fff3cd;
            font-weight: bold;
        }}

        h2 {{
            margin: 40px 0 20px 0;
            color: #667eea;
            font-size: 28px;
        }}

        .player-card {{
            background: white;
            border-radius: 10px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .player-card h3 {{
            color: #667eea;
            font-size: 24px;
            margin-bottom: 20px;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }}

        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }}

        .stat-item {{
            text-align: center;
            padding: 15px;
            background: #f9f9f9;
            border-radius: 8px;
        }}

        .stat-label {{
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }}

        .stat-value {{
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }}

        .stat-value.large {{
            font-size: 32px;
        }}

        .section {{
            margin-top: 25px;
        }}

        .section h4 {{
            color: #555;
            margin-bottom: 12px;
            font-size: 18px;
        }}

        .section p {{
            line-height: 1.8;
            color: #666;
        }}

        .section ul {{
            margin-left: 20px;
            line-height: 1.8;
            color: #666;
        }}

        .rank-bars {{
            margin-top: 10px;
        }}

        .rank-bar {{
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }}

        .rank-label {{
            width: 50px;
            font-weight: bold;
        }}

        .bar-container {{
            flex: 1;
            position: relative;
            height: 30px;
            background: #f0f0f0;
            border-radius: 5px;
            overflow: hidden;
        }}

        .bar {{
            height: 100%;
            transition: width 0.3s ease;
            border-radius: 5px;
        }}

        .bar-1 {{ background: linear-gradient(90deg, #ffd700, #ffed4e); }}
        .bar-2 {{ background: linear-gradient(90deg, #c0c0c0, #e8e8e8); }}
        .bar-3 {{ background: linear-gradient(90deg, #cd7f32, #daa06d); }}
        .bar-4 {{ background: linear-gradient(90deg, #999, #bbb); }}

        .bar-text {{
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 12px;
            font-weight: bold;
            color: #333;
        }}

        .yaku-list {{
            columns: 2;
            column-gap: 20px;
        }}

        .yaku-list li {{
            break-inside: avoid;
            margin-bottom: 5px;
        }}

        @media (max-width: 768px) {{
            .stats-grid {{
                grid-template-columns: 1fr;
            }}

            .yaku-list {{
                columns: 1;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{title}</h1>
        <a href="index.html" class="back-link">← 返回首页</a>
    </div>

    <div class="container">
        <div class="summary-table">
            <table>
                <thead>
                    <tr>
                        <th>玩家</th>
                        <th>半庄</th>
                        <th>小局</th>
                        <th>R值</th>
                        <th>总点数</th>
                        <th>平均顺位</th>
                        <th>1位率</th>
                        <th>和了率</th>
                        <th>放铳率</th>
                        <th>立直率</th>
                        <th>副露率</th>
                    </tr>
                </thead>
                <tbody>
                    {table_rows}
                </tbody>
            </table>
        </div>

        <h2>详细统计</h2>
        {detail_cards}
    </div>
</body>
</html>
"""
    return html


def main():
    print("开始生成静态网站...", file=sys.stderr)

    # 生成首页
    index_html = generate_index_html()
    with open("docs/index.html", "w", encoding="utf-8") as f:
        f.write(index_html)
    print("✓ 已生成 docs/index.html", file=sys.stderr)

    # 生成 M-League 页面
    print("正在处理 M-League 数据...", file=sys.stderr)
    m_league_folder = "game-logs/m-league"
    files = scan_files(m_league_folder, "*.json", recursive=True)

    if files:
        results = []
        round_counts = []
        for fp in sorted(files):
            try:
                with open(fp, "r", encoding="utf-8") as f:
                    data = json.load(f)
                summary = summarize_log(data)
                results.append(summary)
                round_counts.append(len(data.get("log", [])))
            except Exception as ex:
                print(f"  处理失败: {fp} - {ex}", file=sys.stderr)

        stats = calculate_player_stats(results, round_counts)
        m_league_html = generate_stats_html("M-League 数据统计", stats, "m-league")

        with open("docs/m-league.html", "w", encoding="utf-8") as f:
            f.write(m_league_html)
        print(f"✓ 已生成 docs/m-league.html (处理了 {len(results)} 个文件)", file=sys.stderr)
    else:
        print("⚠ 未找到 M-League 数据文件", file=sys.stderr)

    # 生成 WRC 占位页面
    wrc_html = """<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WRC - Santi League</title>
    <style>
        body {
            font-family: 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
        }
        h1 { font-size: 48px; margin-bottom: 20px; }
        p { font-size: 20px; margin-bottom: 30px; }
        a { color: white; text-decoration: none; opacity: 0.9; }
        a:hover { opacity: 1; text-decoration: underline; }
    </style>
</head>
<body>
    <div>
        <h1>🏆 WRC</h1>
        <p>数据统计即将上线...</p>
        <a href="index.html">← 返回首页</a>
    </div>
</body>
</html>
"""
    with open("docs/wrc.html", "w", encoding="utf-8") as f:
        f.write(wrc_html)
    print("✓ 已生成 docs/wrc.html", file=sys.stderr)

    print("\n网站生成完成！", file=sys.stderr)
    print("请将 docs 文件夹的内容推送到 GitHub Pages", file=sys.stderr)


if __name__ == "__main__":
    # 确保 docs 目录存在
    os.makedirs("docs", exist_ok=True)
    main()
