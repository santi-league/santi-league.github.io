# -*- coding: utf-8 -*-
"""
生成静态网站

用法：
  python generate_website.py
"""

import os
import sys
import json
import re
import html as html_module
from datetime import datetime
from player_stats import calculate_player_stats, scan_files, summarize_log, YAKU_TRANSLATION

# 役种英文翻译（中文到英文的映射）
YAKU_TRANSLATION_EN = {v: k for k, v in YAKU_TRANSLATION.items()}
# 添加"役牌"的特殊翻译（因为它是多个龙和风的合并）
YAKU_TRANSLATION_EN["役牌"] = "Value Tiles"

# 多语言翻译字典
TRANSLATIONS = {
    'zh': {
        'title': '雀魂统计 - Santi League',
        'subtitle': '雀魂麻将数据统计',
        'm_league': 'M-League',
        'wrc': 'WRC',
        'view_m_league': '查看 M-League 数据统计',
        'view_wrc': '查看 WRC 数据统计',
        'back_home': '← 返回首页',
        'data_updated': '数据更新至',
        'player': '玩家',
        'games': '半庄',
        'rounds': '小局',
        'r_value': 'R值',
        'total_score': '总点数',
        'avg_rank': '平均顺位',
        'rank_1_rate': '1位率',
        'win_rate': '和了率',
        'deal_in_rate': '放铳率',
        'riichi_rate': '立直率',
        'furo_rate': '副露率',
        'detailed_stats': '详细统计',
        'tenhou_r': '天凤R值',
        'rank_distribution': '名次分布',
        'rank_1': '1位',
        'rank_2': '2位',
        'rank_3': '3位',
        'rank_4': '4位',
        'win_stats': '和了统计',
        'total_wins': '总和了',
        'avg_points': '平均打点',
        'type': '类型',
        'count': '次数',
        'special_stats': '特殊统计',
        'riichi_win': '立直和了',
        'furo_win': '副露和了',
        'dama_win': '默听和了',
        'tsumo_only_win': '仅自摸和了',
        'ippatsu': '一发',
        'ura': '里宝',
        'has_yaku_menzen': '有役门清',
        'menzen_tsumo': '门清自摸',
        'riichi_furo': '立直 & 副露',
        'riichi': '立直',
        'furo': '副露',
        'dama': '默听',
        'count_rate': '次数/比率',
        'win': '和了',
        'draw': '流局',
        'deal_in': '放铳',
        'pass': '横移动',
        'times': '次',
        'deal_in_stats': '放铳统计',
        'avg_deal_in_points': '平均失点',
        'points': '点',
        'vs_stats': '对战情况',
        'opponent': '对手',
        'games_count': '对战数',
        'win_rate_vs': '胜率',
        'win_points': '和了获点',
        'lose_points': '放铳失点',
        'net_points': '净和了放铳点数',
        'score_diff': '总得点差',
        'yaku_stats': '手役统计 (前10名)',
        'draw_tenpai': '流局听牌',
        'draw_count': '流局',
        'tenpai': '听牌',
        'average': '平均',
        'generated_by': 'Generated by Santi League Stats System',
        'coming_soon': '数据统计即将上线...',
        'language': '语言',
        'switch_to_en': 'English',
        'switch_to_zh': '中文',
        'honor_games': '荣誉牌谱',
        'yakuman': '役满',
        'sanbaiman': '三倍满',
        'view_replay': '查看牌谱',
        'recent_games': '最近牌谱',
        'game_date': '日期',
        'participants': '参与玩家',
        'results': '结果',
        'final_rank': '最终名次',
    },
    'en': {
        'title': 'Mahjong Soul Stats - Santi League',
        'subtitle': 'Mahjong Soul Statistics',
        'm_league': 'M-League',
        'wrc': 'WRC',
        'view_m_league': 'View M-League Statistics',
        'view_wrc': 'View WRC Statistics',
        'back_home': '← Back to Home',
        'data_updated': 'Data Updated',
        'player': 'Player',
        'games': 'Games',
        'rounds': 'Rounds',
        'r_value': 'R Value',
        'total_score': 'Total Score',
        'avg_rank': 'Avg Rank',
        'rank_1_rate': '1st Rate',
        'win_rate': 'Win Rate',
        'deal_in_rate': 'Deal-in Rate',
        'riichi_rate': 'Riichi Rate',
        'furo_rate': 'Furo Rate',
        'detailed_stats': 'Detailed Statistics',
        'tenhou_r': 'Tenhou R',
        'rank_distribution': 'Rank Distribution',
        'rank_1': '1st',
        'rank_2': '2nd',
        'rank_3': '3rd',
        'rank_4': '4th',
        'win_stats': 'Win Statistics',
        'total_wins': 'Total Wins',
        'avg_points': 'Avg Points',
        'type': 'Type',
        'count': 'Count',
        'special_stats': 'Special Stats',
        'riichi_win': 'Riichi Win',
        'furo_win': 'Furo Win',
        'dama_win': 'Dama Win',
        'tsumo_only_win': 'Tsumo Only',
        'ippatsu': 'Ippatsu',
        'ura': 'Ura Dora',
        'has_yaku_menzen': 'With Yaku (Closed)',
        'menzen_tsumo': 'Closed Tsumo',
        'riichi_furo': 'Riichi & Furo',
        'riichi': 'Riichi',
        'furo': 'Furo',
        'dama': 'Dama',
        'count_rate': 'Count/Rate',
        'win': 'Win',
        'draw': 'Draw',
        'deal_in': 'Deal-in',
        'pass': 'Pass',
        'times': 'times',
        'deal_in_stats': 'Deal-in Statistics',
        'avg_deal_in_points': 'Avg Deal-in Points',
        'points': 'pts',
        'vs_stats': 'VS Statistics',
        'opponent': 'Opponent',
        'games_count': 'Games',
        'win_rate_vs': 'Win Rate',
        'win_points': 'Win Pts',
        'lose_points': 'Deal-in Pts',
        'net_points': 'Net Pts',
        'score_diff': 'Score Diff',
        'yaku_stats': 'Yaku Statistics (Top 10)',
        'draw_tenpai': 'Draw Tenpai',
        'draw_count': 'Draws',
        'tenpai': 'Tenpai',
        'average': 'avg',
        'generated_by': 'Generated by Santi League Stats System',
        'coming_soon': 'Coming Soon...',
        'language': 'Language',
        'switch_to_en': 'English',
        'switch_to_zh': '中文',
        'honor_games': 'Honor Games',
        'yakuman': 'Yakuman',
        'sanbaiman': 'Sanbaiman',
        'view_replay': 'View Replay',
        'recent_games': 'Recent Games',
        'game_date': 'Date',
        'participants': 'Players',
        'results': 'Results',
        'final_rank': 'Final Ranking',
    }
}


def extract_latest_date(files):
    """从文件名列表中提取最新日期"""
    dates = []
    for fp in files:
        filename = os.path.basename(fp)
        # 匹配格式：月_日_年
        match = re.match(r'(\d+)_(\d+)_(\d+)', filename)
        if match:
            month, day, year = match.groups()
            try:
                date_obj = datetime(int(year), int(month), int(day))
                dates.append(date_obj)
            except ValueError:
                continue

    if dates:
        latest_date = max(dates)
        return latest_date.strftime("%Y年%m月%d日")
    return None


def extract_recent_games(files, results, count=5):
    """
    提取最近的N个牌谱信息

    返回格式: [
        {
            'date': '2025年1月15日',
            'players': ['玩家1', '玩家2', '玩家3', '玩家4'],
            'ranks': [1, 2, 3, 4],  # 对应每个玩家的名次
            'scores': [30000, 25000, 20000, 15000]  # 对应每个玩家的最终点数
        },
        ...
    ]
    """
    # 创建文件和结果的映射
    file_result_pairs = []
    for fp, result in zip(files, results):
        filename = os.path.basename(fp)
        # 匹配格式：月_日_年
        match = re.match(r'(\d+)_(\d+)_(\d+)', filename)
        if match:
            month, day, year = match.groups()
            try:
                date_obj = datetime(int(year), int(month), int(day))
                file_result_pairs.append((date_obj, fp, result))
            except ValueError:
                continue

    # 按日期降序排序
    file_result_pairs.sort(key=lambda x: x[0], reverse=True)

    # 提取最近的N个牌谱
    recent_games = []
    for date_obj, fp, result in file_result_pairs[:count]:
        summary = result.get('summary', [])

        # 提取玩家信息
        players = []
        ranks = []
        scores = []

        # 按名次排序
        sorted_summary = sorted(summary, key=lambda x: x.get('rank', 99))

        for player_data in sorted_summary:
            players.append(player_data.get('name', '未知'))
            ranks.append(player_data.get('rank', 0))
            scores.append(player_data.get('final_points', 0))

        recent_games.append({
            'date': date_obj.strftime("%Y年%m月%d日"),
            'date_en': date_obj.strftime("%Y-%m-%d"),
            'players': players,
            'ranks': ranks,
            'scores': scores
        })

    return recent_games


def generate_index_html(lang='zh'):
    """生成首页"""
    t = TRANSLATIONS[lang]
    lang_code = 'zh-CN' if lang == 'zh' else 'en'
    other_lang = 'en' if lang == 'zh' else 'zh'
    other_index = 'index-en.html' if lang == 'zh' else 'index.html'

    html = f"""<!DOCTYPE html>
<html lang="{lang_code}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{t['title']}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Microsoft YaHei', 'PingFang SC', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
        }}

        .container {{
            text-align: center;
            padding: 40px;
        }}

        .logo {{
            font-size: 72px;
            margin-bottom: 20px;
            animation: float 3s ease-in-out infinite;
        }}

        @keyframes float {{
            0%, 100% {{ transform: translateY(0px); }}
            50% {{ transform: translateY(-20px); }}
        }}

        h1 {{
            font-size: 48px;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }}

        .subtitle {{
            font-size: 20px;
            margin-bottom: 60px;
            opacity: 0.9;
        }}

        .links {{
            display: flex;
            gap: 40px;
            justify-content: center;
            flex-wrap: wrap;
        }}

        .link-card {{
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px 60px;
            border-radius: 20px;
            text-decoration: none;
            color: white;
            transition: all 0.3s ease;
            border: 2px solid rgba(255, 255, 255, 0.2);
            min-width: 200px;
        }}

        .link-card:hover {{
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }}

        .link-card .icon {{
            font-size: 64px;
            margin-bottom: 20px;
            display: block;
        }}

        .link-card .title {{
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 10px;
        }}

        .link-card .desc {{
            font-size: 14px;
            opacity: 0.8;
        }}

        footer {{
            position: fixed;
            bottom: 20px;
            font-size: 14px;
            opacity: 0.7;
        }}

        .lang-switch {{
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            color: white;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }}

        .lang-switch:hover {{
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }}
    </style>
</head>
<body>
    <a href="{other_index}" class="lang-switch">🌐 {t['switch_to_' + other_lang]}</a>

    <div class="container">
        <div class="logo">🀄</div>
        <h1>Santi League</h1>
        <p class="subtitle">{t['subtitle']}</p>

        <div class="links">
            <a href="{'m-league-en.html' if lang == 'en' else 'm-league.html'}" class="link-card">
                <span class="icon">🎴</span>
                <div class="title">{t['m_league']}</div>
                <div class="desc">{t['view_m_league']}</div>
            </a>

            <a href="{'wrc-en.html' if lang == 'en' else 'wrc.html'}" class="link-card">
                <span class="icon">🏆</span>
                <div class="title">{t['wrc']}</div>
                <div class="desc">{t['view_wrc']}</div>
            </a>
        </div>
    </div>

    <footer>
        {t['generated_by']}
    </footer>
</body>
</html>
"""
    return html


def generate_stats_html(title, stats_data, league_name, latest_date=None, lang='zh', honor_games=None, recent_games=None):
    """生成统计页面"""
    t = TRANSLATIONS[lang]
    lang_code = 'zh-CN' if lang == 'zh' else 'en'
    other_lang = 'en' if lang == 'zh' else 'zh'

    # 根据语言确定其他页面的链接
    if league_name == 'm-league':
        other_stats_page = 'm-league-en.html' if lang == 'zh' else 'm-league.html'
        other_index = 'index-en.html' if lang == 'zh' else 'index.html'  # 语言切换用
        current_index = 'index.html' if lang == 'zh' else 'index-en.html'  # 返回首页用
    else:  # wrc
        other_stats_page = 'wrc-en.html' if lang == 'zh' else 'wrc.html'
        other_index = 'index-en.html' if lang == 'zh' else 'index.html'  # 语言切换用
        current_index = 'index.html' if lang == 'zh' else 'index-en.html'  # 返回首页用

    # 提取并移除league_average
    league_avg = stats_data.pop("_league_average", {})

    # 按对局数降序排序（排除_league_average）
    sorted_players = sorted(stats_data.items(), key=lambda x: (-x[1]["games"], x[0]))

    # 日期信息
    date_info = f"<p class='date-info'>{t['data_updated']}: {latest_date}</p>" if latest_date else ""

    # 最近牌谱部分
    recent_section = ""
    if recent_games and len(recent_games) > 0:
        recent_cards = ""
        for game in recent_games:
            date_str = game['date'] if lang == 'zh' else game['date_en']

            # 生成玩家和结果列表
            player_rows = ""
            for i, (player, rank, score) in enumerate(zip(game['players'], game['ranks'], game['scores'])):
                rank_class = f"rank-{rank}"
                player_rows += f"""
                <tr class="{rank_class}">
                    <td class="rank-cell">{rank}</td>
                    <td class="player-cell">{player}</td>
                    <td class="score-cell">{score}</td>
                </tr>
                """

            recent_cards += f"""
            <div class="recent-game-card">
                <div class="game-date">{date_str}</div>
                <table class="game-results-table">
                    <thead>
                        <tr>
                            <th>{t['final_rank']}</th>
                            <th>{t['player']}</th>
                            <th>{t['total_score']}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {player_rows}
                    </tbody>
                </table>
            </div>
            """

        recent_section = f"""
        <div class="recent-games-section">
            <h2>{t['recent_games']}</h2>
            <div class="recent-games-grid">
                {recent_cards}
            </div>
        </div>
        """

    # 荣誉牌谱部分
    honor_section = ""
    if honor_games and len(honor_games) > 0:
        honor_cards = ""
        for game in honor_games:
            # 翻译役种
            yaku_list = game.get('yaku_list', [])
            if lang == 'zh':
                translated_yaku = ', '.join([YAKU_TRANSLATION.get(y.split('(')[0], y) for y in yaku_list])
            else:
                translated_yaku = ', '.join([YAKU_TRANSLATION_EN.get(y.split('(')[0], y) if '(' in y else y for y in yaku_list])

            game_type = game.get('type', 'yakuman')
            game_type_text = t['yakuman'] if game_type == 'yakuman' else t['sanbaiman']
            game_type_class = 'yakuman' if game_type == 'yakuman' else 'sanbaiman'

            # HTML转义URL中的特殊字符
            escaped_url = html_module.escape(game['tenhou_url'], quote=True)

            honor_cards += f"""
            <div class="honor-card {game_type_class}">
                <div class="honor-type">{game_type_text}</div>
                <div class="honor-info">
                    <div class="honor-date">{game['date']}</div>
                    <div class="honor-round">{game['round']}</div>
                    <div class="honor-winner">{game['winner']}</div>
                    <div class="honor-yaku">{translated_yaku}</div>
                </div>
                <a href="{escaped_url}" target="_blank" class="honor-replay-btn">{t['view_replay']}</a>
            </div>
            """

        honor_section = f"""
        <div class="honor-games-section">
            <h2>{t['honor_games']}</h2>
            <div class="honor-games-grid">
                {honor_cards}
            </div>
        </div>
        """

    # 生成表格行
    table_rows = ""
    for name, data in sorted_players:
        # 使用锚点链接
        player_id = name.replace(" ", "_").replace("(", "").replace(")", "")
        table_rows += f"""
        <tr>
            <td class="player-name"><a href="#player-{player_id}" class="player-link">{name}</a></td>
            <td>{data['games']}</td>
            <td>{data['total_rounds']}</td>
            <td class="highlight">{data['tenhou_r']:.2f}</td>
            <td>{data['total_score']:+}</td>
            <td>{data['avg_rank']:.2f}</td>
            <td>{data['rank_1_rate']:.1f}%</td>
            <td>{data['win_rate']:.1f}%</td>
            <td>{data['deal_in_rate']:.1f}%</td>
            <td>{data['riichi_rate']:.1f}%</td>
            <td>{data['furo_rate']:.1f}%</td>
        </tr>
        """

    # 生成详细统计卡片
    detail_cards = ""
    for name, data in sorted_players:
        player_id = name.replace(" ", "_").replace("(", "").replace(")", "")
        riichi_win_hands = data['riichi_win_hands']
        furo_then_win_hands = data['furo_then_win_hands']
        dama_win_hands = data.get('dama_win_hands', 0)
        tsumo_only_win_hands = data.get('tsumo_only_win_hands', 0)

        # 手役统计（前10）
        yaku_html = ""
        if data.get('yaku_count'):
            yaku_sorted = sorted(data['yaku_count'].items(), key=lambda x: -x[1])[:10]
            for yaku, count in yaku_sorted:
                # 根据语言选择役种翻译
                if lang == 'zh':
                    # 如果是英文役种，翻译成中文；如果已经是中文，保持不变
                    yaku_name = YAKU_TRANSLATION.get(yaku, yaku)
                else:  # English
                    # 如果是中文役种，翻译回英文；如果已经是英文，保持不变
                    yaku_name = YAKU_TRANSLATION_EN.get(yaku, yaku)
                rate = data['yaku_rate'].get(yaku, 0)
                avg_rate = league_avg.get('yaku_rate', {}).get(yaku, 0) if league_avg else 0
                avg_text = f' <span class="league-avg">({t["average"]}{avg_rate}%)</span>' if avg_rate > 0 else ''
                yaku_html += f"<li>{yaku_name}: {count}{t['times']} ({rate}%){avg_text}</li>"

        # 对战情况表格
        vs_players_html = ""
        if data.get('vs_players'):
            # 按对战场数排序
            vs_sorted = sorted(data['vs_players'].items(), key=lambda x: -x[1]['games'])
            vs_players_html = f"""
            <table class="vs-table">
                <thead>
                    <tr>
                        <th>{t['opponent']}</th>
                        <th>{t['games_count']}</th>
                        <th>{t['win_rate_vs']}</th>
                        <th>{t['win_points']}</th>
                        <th>{t['lose_points']}</th>
                        <th>{t['net_points']}</th>
                        <th>{t['score_diff']}</th>
                    </tr>
                </thead>
                <tbody>
            """
            for opponent, vs_data in vs_sorted:
                net_points = vs_data['net_points']
                net_class = 'positive' if net_points > 0 else 'negative' if net_points < 0 else 'neutral'
                score_diff = vs_data['score_diff']
                score_diff_class = 'positive' if score_diff > 0 else 'negative' if score_diff < 0 else 'neutral'
                opponent_id = opponent.replace(" ", "_").replace("(", "").replace(")", "")
                vs_players_html += f"""
                    <tr>
                        <td class="opponent-name"><a href="#player-{opponent_id}" class="opponent-link">{opponent}</a></td>
                        <td>{vs_data['games']}</td>
                        <td>{vs_data['win_rate']:.1f}%</td>
                        <td class="positive">+{vs_data['win_points']}</td>
                        <td class="negative">-{vs_data['lose_points']}</td>
                        <td class="{net_class}">{net_points:+}</td>
                        <td class="{score_diff_class}">{score_diff:+}</td>
                    </tr>
                """
            vs_players_html += """
                </tbody>
            </table>
            """

        detail_cards += f"""
        <div class="player-card" id="player-{player_id}">
            <h3>{name}</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-label">{t['tenhou_r']}</div>
                    <div class="stat-value large">{data['tenhou_r']:.2f}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">{t['total_score']}</div>
                    <div class="stat-value">{data['total_score']:+}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">{t['avg_rank']}</div>
                    <div class="stat-value">{data['avg_rank']:.2f}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">{t['games_count']}</div>
                    <div class="stat-value">{data['games']} {t['games']}</div>
                </div>
            </div>

            <div class="section">
                <h4>{t['rank_distribution']}</h4>
                <div class="rank-bars">
                    <div class="rank-bar">
                        <span class="rank-label">{t['rank_1']}</span>
                        <div class="bar-container">
                            <div class="bar bar-1" style="width: {data['rank_1_rate']}%"></div>
                            <span class="bar-text">{data['rank_1']} {t['times']} ({data['rank_1_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">{t['rank_2']}</span>
                        <div class="bar-container">
                            <div class="bar bar-2" style="width: {data['rank_2_rate']}%"></div>
                            <span class="bar-text">{data['rank_2']} {t['times']} ({data['rank_2_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">{t['rank_3']}</span>
                        <div class="bar-container">
                            <div class="bar bar-3" style="width: {data['rank_3_rate']}%"></div>
                            <span class="bar-text">{data['rank_3']} {t['times']} ({data['rank_3_rate']:.1f}%)</span>
                        </div>
                    </div>
                    <div class="rank-bar">
                        <span class="rank-label">{t['rank_4']}</span>
                        <div class="bar-container">
                            <div class="bar bar-4" style="width: {data['rank_4_rate']}%"></div>
                            <span class="bar-text">{data['rank_4']} {t['times']} ({data['rank_4_rate']:.1f}%)</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="section">
                <h4>{t['win_stats']}</h4>
                <div class="summary-box">
                    <span class="summary-label">{t['total_wins']}:</span>
                    <span class="summary-value">{data['win_hands']} {t['rounds']} ({data['win_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('win_rate', 0):.1f}%)</span></span>
                    <span class="summary-label">{t['avg_points']}:</span>
                    <span class="summary-value">{data['avg_win_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_win_points', 0):.0f}{t['points']})</span></span>
                </div>
                <table class="stats-table">
                    <thead>
                        <tr>
                            <th>{t['type']}</th>
                            <th>{t['count']}</th>
                            <th>{t['avg_points']}</th>
                            <th>{t['special_stats']}</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="type-label">{t['riichi_win']}</td>
                            <td>{riichi_win_hands} {t['rounds']}</td>
                            <td class="points-value">{data['avg_riichi_win_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_riichi_win_points', 0):.0f})</span></td>
                            <td class="special-stats">{t['ippatsu']}: {data['ippatsu_hands']}{t['rounds']} ({data['ippatsu_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('ippatsu_rate', 0):.1f}%)</span> · {t['ura']}: {data['ura_hands']}{t['rounds']} ({data['ura_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('ura_rate', 0):.1f}%)</span></td>
                        </tr>
                        <tr>
                            <td class="type-label">{t['furo_win']}</td>
                            <td>{furo_then_win_hands} {t['rounds']}</td>
                            <td class="points-value">{data['avg_furo_win_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_furo_win_points', 0):.0f})</span></td>
                            <td class="special-stats">-</td>
                        </tr>
                        {f'''<tr>
                            <td class="type-label">{t['dama_win']}</td>
                            <td>{dama_win_hands} {t['rounds']}</td>
                            <td class="points-value">{data['avg_dama_win_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_dama_win_points', 0):.0f})</span></td>
                            <td class="special-stats">{t['has_yaku_menzen']}</td>
                        </tr>''' if dama_win_hands > 0 else ''}
                        {f'''<tr>
                            <td class="type-label">{t['tsumo_only_win']}</td>
                            <td>{tsumo_only_win_hands} {t['rounds']}</td>
                            <td class="points-value">{data['avg_tsumo_only_win_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_tsumo_only_win_points', 0):.0f})</span></td>
                            <td class="special-stats">{t['menzen_tsumo']}</td>
                        </tr>''' if tsumo_only_win_hands > 0 else ''}
                    </tbody>
                </table>
            </div>

            <div class="section">
                <h4>{t['riichi_furo']}</h4>
                <table class="stats-table">
                    <thead>
                        <tr>
                            <th>{t['type']}</th>
                            <th>{t['count_rate']}</th>
                            <th>{t['win']}</th>
                            <th>{t['draw']}</th>
                            <th>{t['deal_in']}</th>
                            <th>{t['pass']}</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="type-label">{t['riichi']}</td>
                            <td>{data['riichi_hands']} {t['rounds']} ({data['riichi_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('riichi_rate', 0):.1f}%)</span></td>
                            <td class="rate-good">{data['riichi_win_rate']:.1f}% <span class="league-avg">({t['average']}{league_avg.get('riichi_win_rate', 0):.1f}%)</span></td>
                            <td class="rate-neutral">{data['riichi_ryuukyoku_rate']:.1f}%</td>
                            <td class="rate-bad">{data['riichi_then_deal_in_rate']:.1f}% <span class="league-avg">({t['average']}{league_avg.get('riichi_then_deal_in_rate', 0):.1f}%)</span></td>
                            <td class="rate-neutral">{data['riichi_pass_rate']:.1f}%</td>
                        </tr>
                        <tr>
                            <td class="type-label">{t['furo']}</td>
                            <td>{data['furo_hands']} {t['rounds']} ({data['furo_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('furo_rate', 0):.1f}%)</span></td>
                            <td class="rate-good">{data['furo_then_win_rate']:.1f}% <span class="league-avg">({t['average']}{league_avg.get('furo_then_win_rate', 0):.1f}%)</span></td>
                            <td class="rate-neutral">{data['furo_ryuukyoku_rate']:.1f}%</td>
                            <td class="rate-bad">{data['furo_then_deal_in_rate']:.1f}% <span class="league-avg">({t['average']}{league_avg.get('furo_then_deal_in_rate', 0):.1f}%)</span></td>
                            <td class="rate-neutral">{data['furo_pass_rate']:.1f}%</td>
                        </tr>
                        {f'''<tr>
                            <td class="type-label">{t['dama']}</td>
                            <td>{data['dama_state_hands']} {t['times']}</td>
                            <td class="rate-good">{data['dama_state_win_rate']:.1f}%</td>
                            <td class="rate-neutral">{data['dama_state_draw_rate']:.1f}%</td>
                            <td class="rate-bad">{data['dama_state_deal_in_rate']:.1f}%</td>
                            <td class="rate-neutral">{data['dama_state_pass_rate']:.1f}%</td>
                        </tr>''' if data.get('dama_state_hands', 0) > 0 else ''}
                    </tbody>
                </table>
            </div>

            <div class="section">
                <h4>{t['deal_in_stats']}</h4>
                <div class="summary-box">
                    <span class="summary-label">{t['deal_in']}:</span>
                    <span class="summary-value">{data['deal_in_hands']} {t['rounds']} ({data['deal_in_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('deal_in_rate', 0):.1f}%)</span></span>
                    <span class="summary-label">{t['avg_deal_in_points']}:</span>
                    <span class="summary-value negative">{data['avg_deal_in_points']:.0f}{t['points']} <span class="league-avg">({t['average']}{league_avg.get('avg_deal_in_points', 0):.0f}{t['points']})</span></span>
                </div>
            </div>

            {f'''<div class="section">
                <h4>{t['vs_stats']}</h4>
                {vs_players_html}
            </div>''' if vs_players_html else ''}

            {f'''<div class="section">
                <h4>{t['yaku_stats']}</h4>
                <ul class="yaku-list">
                    {yaku_html}
                </ul>
            </div>''' if yaku_html else ''}

            {f'''<div class="section">
                <h4>{t['draw_tenpai']}</h4>
                <p>{t['draw_count']}: {data['ryuukyoku_hands']} {t['times']}, {t['tenpai']} {data['ryuukyoku_tenpai']} {t['times']} ({data['tenpai_rate']:.1f}%) <span class="league-avg">({t['average']}{league_avg.get('tenpai_rate', 0):.1f}%)</span></p>
            </div>''' if data['ryuukyoku_hands'] > 0 else ''}
        </div>
        """

    html = f"""<!DOCTYPE html>
<html lang="{lang_code}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - Santi League</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Microsoft YaHei', 'PingFang SC', sans-serif;
            background: #f5f5f5;
            color: #333;
        }}

        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
        }}

        .header h1 {{
            font-size: 36px;
            margin-bottom: 10px;
        }}

        .date-info {{
            font-size: 16px;
            margin: 10px 0;
            opacity: 0.9;
        }}

        .back-link {{
            display: inline-block;
            margin-top: 10px;
            color: white;
            text-decoration: none;
            opacity: 0.9;
        }}

        .back-link:hover {{
            opacity: 1;
            text-decoration: underline;
        }}

        .lang-switch {{
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            color: white;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }}

        .lang-switch:hover {{
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }}

        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}

        .summary-table {{
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow-x: auto;
            margin-bottom: 30px;
        }}

        table {{
            width: 100%;
            border-collapse: collapse;
        }}

        th {{
            background: #667eea;
            color: white;
            padding: 15px 10px;
            text-align: center;
            font-weight: 600;
        }}

        td {{
            padding: 12px 10px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }}

        tr:hover {{
            background: #f9f9f9;
        }}

        .player-name {{
            font-weight: bold;
        }}

        .player-link {{
            color: #667eea;
            text-decoration: none;
            transition: color 0.2s ease;
        }}

        .player-link:hover {{
            color: #764ba2;
            text-decoration: underline;
        }}

        .highlight {{
            background: #fff3cd;
            font-weight: bold;
        }}

        html {{
            scroll-behavior: smooth;
        }}

        h2 {{
            margin: 40px 0 20px 0;
            color: #667eea;
            font-size: 28px;
        }}

        .player-card {{
            background: white;
            border-radius: 10px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}

        .player-card h3 {{
            color: #667eea;
            font-size: 24px;
            margin-bottom: 20px;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }}

        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }}

        .stat-item {{
            text-align: center;
            padding: 15px;
            background: #f9f9f9;
            border-radius: 8px;
        }}

        .stat-label {{
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }}

        .stat-value {{
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }}

        .stat-value.large {{
            font-size: 32px;
        }}

        .section {{
            margin-top: 25px;
        }}

        .section h4 {{
            color: #555;
            margin-bottom: 12px;
            font-size: 18px;
        }}

        .section p {{
            line-height: 1.8;
            color: #666;
        }}

        .section ul {{
            margin-left: 20px;
            line-height: 1.8;
            color: #666;
        }}

        .rank-bars {{
            margin-top: 10px;
        }}

        .rank-bar {{
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }}

        .rank-label {{
            width: 50px;
            font-weight: bold;
        }}

        .bar-container {{
            flex: 1;
            position: relative;
            height: 30px;
            background: #f0f0f0;
            border-radius: 5px;
            overflow: hidden;
        }}

        .bar {{
            height: 100%;
            transition: width 0.3s ease;
            border-radius: 5px;
        }}

        .bar-1 {{ background: linear-gradient(90deg, #28a745, #5cb85c); }}
        .bar-2 {{ background: linear-gradient(90deg, #17a2b8, #5bc0de); }}
        .bar-3 {{ background: linear-gradient(90deg, #ffc107, #ffda6a); }}
        .bar-4 {{ background: linear-gradient(90deg, #dc3545, #e66a73); }}

        .bar-text {{
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 12px;
            font-weight: bold;
            color: #333;
        }}

        .yaku-list {{
            columns: 2;
            column-gap: 20px;
        }}

        .yaku-list li {{
            break-inside: avoid;
            margin-bottom: 5px;
        }}

        .vs-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            font-size: 14px;
        }}

        .vs-table th {{
            background: #667eea;
            color: white;
            padding: 10px 8px;
            text-align: center;
            font-weight: 600;
        }}

        .vs-table td {{
            padding: 8px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }}

        .vs-table tr:hover {{
            background: #f9f9f9;
        }}

        .vs-table .opponent-name {{
            font-weight: bold;
            text-align: left;
        }}

        .vs-table .opponent-link {{
            color: #667eea;
            text-decoration: none;
            transition: color 0.2s ease;
        }}

        .vs-table .opponent-link:hover {{
            color: #764ba2;
            text-decoration: underline;
        }}

        .vs-table .positive {{
            color: #28a745;
            font-weight: bold;
        }}

        .vs-table .negative {{
            color: #dc3545;
            font-weight: bold;
        }}

        .vs-table .neutral {{
            color: #666;
        }}

        .summary-box {{
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
            border-left: 4px solid #667eea;
        }}

        .summary-label {{
            font-size: 14px;
            color: #666;
            font-weight: 500;
        }}

        .summary-value {{
            font-size: 18px;
            color: #333;
            font-weight: bold;
        }}

        .summary-value.negative {{
            color: #dc3545;
        }}

        .league-avg {{
            font-size: 13px;
            color: #888;
            margin-left: 8px;
            font-weight: normal;
        }}

        .stats-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }}

        .stats-table thead {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }}

        .stats-table th {{
            color: white;
            padding: 12px 10px;
            text-align: center;
            font-weight: 600;
            font-size: 14px;
        }}

        .stats-table td {{
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #f0f0f0;
            font-size: 16px;
        }}

        .stats-table tbody tr:hover {{
            background: #f8f9fa;
        }}

        .stats-table tbody tr:last-child td {{
            border-bottom: none;
        }}

        .stats-table .type-label {{
            font-weight: 600;
            color: #555;
            text-align: left;
        }}

        .stats-table .points-value {{
            color: #667eea;
            font-weight: 600;
            font-size: 18px;
        }}

        .stats-table .special-stats {{
            color: #666;
            font-size: 14px;
        }}

        .stats-table .rate-good {{
            color: #28a745;
            font-weight: 600;
            font-size: 17px;
        }}

        .stats-table .rate-bad {{
            color: #dc3545;
            font-weight: 600;
            font-size: 17px;
        }}

        .stats-table .rate-neutral {{
            color: #666;
            font-size: 16px;
        }}

        /* 最近牌谱样式 - 紧凑版 */
        .recent-games-section {{
            margin-bottom: 30px;
        }}

        .recent-games-section h2 {{
            margin: 0 0 15px 0;
            color: #667eea;
            font-size: 24px;
        }}

        .recent-games-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
        }}

        .recent-game-card {{
            background: white;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            border-top: 3px solid #667eea;
            transition: transform 0.2s, box-shadow 0.2s;
        }}

        .recent-game-card:hover {{
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.12);
        }}

        .game-date {{
            font-size: 13px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
            text-align: center;
            padding-bottom: 8px;
            border-bottom: 1px solid #f0f0f0;
        }}

        .game-results-table {{
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }}

        .game-results-table th {{
            background: #f8f9fa;
            padding: 5px 3px;
            text-align: center;
            font-weight: 600;
            color: #555;
            font-size: 11px;
            border-bottom: 1px solid #e0e0e0;
        }}

        .game-results-table td {{
            padding: 6px 3px;
            text-align: center;
            border-bottom: 1px solid #f5f5f5;
        }}

        .game-results-table tbody tr:last-child td {{
            border-bottom: none;
        }}

        .game-results-table .rank-1 {{
            background: linear-gradient(90deg, #fffbf0 0%, #fff 100%);
        }}

        .game-results-table .rank-1 .rank-cell {{
            color: #ffc107;
            font-weight: bold;
            font-size: 14px;
        }}

        .game-results-table .rank-2 .rank-cell {{
            color: #666;
            font-weight: 600;
        }}

        .game-results-table .rank-3 .rank-cell {{
            color: #999;
        }}

        .game-results-table .rank-4 .rank-cell {{
            color: #ccc;
        }}

        .game-results-table .player-cell {{
            font-weight: 500;
            color: #333;
            font-size: 11px;
            max-width: 80px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }}

        .game-results-table .score-cell {{
            color: #667eea;
            font-weight: 500;
            font-size: 11px;
        }}

        /* 荣誉牌谱样式 */
        .honor-games-section {{
            margin-bottom: 40px;
        }}

        .honor-games-section h2 {{
            margin: 0 0 20px 0;
            color: #667eea;
            font-size: 28px;
        }}

        .honor-games-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}

        .honor-card {{
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border-left: 5px solid;
            transition: transform 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }}

        .honor-card.yakuman {{
            border-left-color: #dc3545;
            background: linear-gradient(135deg, #fff 0%, #ffe6e6 100%);
        }}

        .honor-card.sanbaiman {{
            border-left-color: #ffc107;
            background: linear-gradient(135deg, #fff 0%, #fff9e6 100%);
        }}

        .honor-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0,0,0,0.15);
        }}

        .honor-type {{
            font-size: 20px;
            font-weight: bold;
            color: #667eea;
        }}

        .honor-card.yakuman .honor-type {{
            color: #dc3545;
        }}

        .honor-card.sanbaiman .honor-type {{
            color: #ffc107;
        }}

        .honor-info {{
            display: flex;
            flex-direction: column;
            gap: 8px;
        }}

        .honor-date {{
            font-size: 14px;
            color: #666;
        }}

        .honor-round {{
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }}

        .honor-winner {{
            font-size: 18px;
            font-weight: bold;
            color: #667eea;
        }}

        .honor-yaku {{
            font-size: 13px;
            color: #555;
            line-height: 1.5;
        }}

        .honor-replay-btn {{
            display: inline-block;
            padding: 10px 20px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            text-align: center;
            font-weight: 600;
            transition: background 0.2s;
        }}

        .honor-replay-btn:hover {{
            background: #764ba2;
        }}

        @media (max-width: 768px) {{
            .stats-grid {{
                grid-template-columns: 1fr;
            }}

            .yaku-list {{
                columns: 1;
            }}

            .vs-table {{
                font-size: 12px;
            }}

            .vs-table th,
            .vs-table td {{
                padding: 6px 4px;
            }}

            .stats-table {{
                font-size: 12px;
            }}

            .stats-table th,
            .stats-table td {{
                padding: 8px 5px;
            }}

            .stats-table .special-stats {{
                font-size: 11px;
            }}

            .summary-box {{
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }}

            .recent-games-grid {{
                grid-template-columns: 1fr;
            }}

            .honor-games-grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <a href="{other_stats_page}" class="lang-switch">🌐 {t['switch_to_' + other_lang]}</a>
        <h1>{title}</h1>
        {date_info}
        <a href="{current_index}" class="back-link">{t['back_home']}</a>
    </div>

    <div class="container">
        {recent_section}
        {honor_section}

        <div class="summary-table">
            <table>
                <thead>
                    <tr>
                        <th>{t['player']}</th>
                        <th>{t['games']}</th>
                        <th>{t['rounds']}</th>
                        <th>{t['r_value']}</th>
                        <th>{t['total_score']}</th>
                        <th>{t['avg_rank']}</th>
                        <th>{t['rank_1_rate']}</th>
                        <th>{t['win_rate']}</th>
                        <th>{t['deal_in_rate']}</th>
                        <th>{t['riichi_rate']}</th>
                        <th>{t['furo_rate']}</th>
                    </tr>
                </thead>
                <tbody>
                    {table_rows}
                </tbody>
            </table>
        </div>

        <h2>{t['detailed_stats']}</h2>
        {detail_cards}
    </div>
</body>
</html>
"""
    return html


def main():
    print("开始生成静态网站...", file=sys.stderr)

    # 生成中文首页
    index_html_zh = generate_index_html(lang='zh')
    with open("docs/index.html", "w", encoding="utf-8") as f:
        f.write(index_html_zh)
    print("✓ 已生成 docs/index.html (中文)", file=sys.stderr)

    # 生成英文首页
    index_html_en = generate_index_html(lang='en')
    with open("docs/index-en.html", "w", encoding="utf-8") as f:
        f.write(index_html_en)
    print("✓ 已生成 docs/index-en.html (英文)", file=sys.stderr)

    # 加载荣誉牌谱数据
    honor_games = []
    honor_games_path = "docs/honor_games.json"
    if os.path.exists(honor_games_path):
        try:
            with open(honor_games_path, "r", encoding="utf-8") as f:
                honor_data = json.load(f)
                honor_games = honor_data.get('games', [])
            print(f"✓ 已加载 {len(honor_games)} 个荣誉牌谱", file=sys.stderr)
        except Exception as e:
            print(f"⚠ 加载荣誉牌谱失败: {e}", file=sys.stderr)

    # 生成 M-League 页面
    print("正在处理 M-League 数据...", file=sys.stderr)
    m_league_folder = "game-logs/m-league"
    files = scan_files(m_league_folder, "*.json", recursive=True)

    if files:
        results = []
        round_counts = []
        for fp in sorted(files):
            try:
                with open(fp, "r", encoding="utf-8") as f:
                    data = json.load(f)
                summary = summarize_log(data)
                results.append(summary)
                round_counts.append(len(data.get("log", [])))
            except Exception as ex:
                print(f"  处理失败: {fp} - {ex}", file=sys.stderr)

        # 提取最新日期
        latest_date = extract_latest_date(files)

        # 提取最近5个牌谱（注意：files需要排序，因为results是按sorted(files)处理的）
        recent_games = extract_recent_games(sorted(files), results, count=5)

        stats = calculate_player_stats(results, round_counts)

        # 生成中文版
        m_league_html_zh = generate_stats_html("M-League 数据统计", dict(stats), "m-league", latest_date, lang='zh', honor_games=honor_games, recent_games=recent_games)
        with open("docs/m-league.html", "w", encoding="utf-8") as f:
            f.write(m_league_html_zh)
        print(f"✓ 已生成 docs/m-league.html (中文, 处理了 {len(results)} 个文件)", file=sys.stderr)

        # 生成英文版
        m_league_html_en = generate_stats_html("M-League Statistics", dict(stats), "m-league", latest_date, lang='en', honor_games=honor_games, recent_games=recent_games)
        with open("docs/m-league-en.html", "w", encoding="utf-8") as f:
            f.write(m_league_html_en)
        print(f"✓ 已生成 docs/m-league-en.html (英文, 处理了 {len(results)} 个文件)", file=sys.stderr)

        if latest_date:
            print(f"  最新牌谱日期: {latest_date}", file=sys.stderr)
    else:
        print("⚠ 未找到 M-League 数据文件", file=sys.stderr)

    # 生成 WRC 占位页面（中文）
    t_zh = TRANSLATIONS['zh']
    wrc_html_zh = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WRC - Santi League</title>
    <style>
        body {{
            font-family: 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
        }}
        h1 {{ font-size: 48px; margin-bottom: 20px; }}
        p {{ font-size: 20px; margin-bottom: 30px; }}
        a {{ color: white; text-decoration: none; opacity: 0.9; margin: 0 10px; }}
        a:hover {{ opacity: 1; text-decoration: underline; }}
        .lang-switch {{
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }}
    </style>
</head>
<body>
    <a href="wrc-en.html" class="lang-switch">🌐 English</a>
    <div>
        <h1>🏆 WRC</h1>
        <p>{t_zh['coming_soon']}</p>
        <a href="index.html">{t_zh['back_home']}</a>
    </div>
</body>
</html>
"""
    with open("docs/wrc.html", "w", encoding="utf-8") as f:
        f.write(wrc_html_zh)
    print("✓ 已生成 docs/wrc.html (中文)", file=sys.stderr)

    # 生成 WRC 占位页面（英文）
    t_en = TRANSLATIONS['en']
    wrc_html_en = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WRC - Santi League</title>
    <style>
        body {{
            font-family: 'Microsoft YaHei', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
        }}
        h1 {{ font-size: 48px; margin-bottom: 20px; }}
        p {{ font-size: 20px; margin-bottom: 30px; }}
        a {{ color: white; text-decoration: none; opacity: 0.9; margin: 0 10px; }}
        a:hover {{ opacity: 1; text-decoration: underline; }}
        .lang-switch {{
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }}
    </style>
</head>
<body>
    <a href="wrc.html" class="lang-switch">🌐 中文</a>
    <div>
        <h1>🏆 WRC</h1>
        <p>{t_en['coming_soon']}</p>
        <a href="index-en.html">{t_en['back_home']}</a>
    </div>
</body>
</html>
"""
    with open("docs/wrc-en.html", "w", encoding="utf-8") as f:
        f.write(wrc_html_en)
    print("✓ 已生成 docs/wrc-en.html (英文)", file=sys.stderr)

    print("\n网站生成完成！", file=sys.stderr)
    print("请将 docs 文件夹的内容推送到 GitHub Pages", file=sys.stderr)


if __name__ == "__main__":
    # 确保 docs 目录存在
    os.makedirs("docs", exist_ok=True)
    main()
